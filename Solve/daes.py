import cryptography
from cryptography.fernet import Fernet

s_box = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)
inv_s_box = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)


def help_enc(message, key):
    start, end = 0, 0
    ciphered = []
    for i in range(int(len(message) / 16)):  # 16*8
        cBlock = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
        start = end
        end = (i + 1) * 16
        for row in range(4):
            for col in range(4):
                cBlock[row][col] = s_box[((i % 4) * 4 + row) * 16 + ((i % 4) * 4 + col)]
        ciphered.append(cBlock)
    for roundK in ciphered:
        for c_row in range(4):
            for c_col in range(4):
                roundK[c_row][c_col] = roundK[c_row][c_col] ^ key[4 * c_row + c_col]

    right = []
    left = []
    if len(ciphered) % 2 == 0:
        for r in range(len(ciphered)):
            if r < len(ciphered) / 2:
                left.append(ciphered[r][0:2])
                left.append(ciphered[r][2:])
            else:
                right.append(ciphered[r[0:2]])
                right.append(ciphered[r][2:0])
    else:
        for lef in range(len(ciphered)):
            if lef < (len(ciphered) - 1) / 2:
                left.append(ciphered[lef][0:2])
                left.append(ciphered[lef][2:0])
            if lef > (len(ciphered) - 1) / 2:
                right.append(ciphered[lef][0:2])
                right.append(ciphered[lef][2:])
            else:
                left.append(ciphered[lef][0:2])
                right.append(ciphered[lef][2:])
    final_left = right
    final_right = []
    for finalR in range(len(ciphered)):
        temp = [[0, 0, 0, 0], [0, 0, 0, 0]]
        for row_element in range(2):
            for col_element in range(4):
                temp[row_element][col_element] = left[finalR][row_element][col_element] ^ right[finalR][row_element][
                    col_element] ^ key[row_element * 4 + col_element]
        final_right.append(temp)
    cyphered = []
    for dl in range(len(ciphered)):
        for row_element_dl in range(2):
            for col_element_dl in range(4):
                cyphered.append(final_left[dl][row_element_dl][col_element_dl])
    for dr in range(len(ciphered)):
        for row_element_dr in range(2):
            for col_element_dr in range(4):
                cyphered.append(final_right[dr][row_element_dr][col_element_dr])

    return cyphered


def encrypt(message_path, key_path, output_path):
    with open(message_path, 'rb') as message_file:
        bitsArrayMessage = []
        bytes = message_file.read(1)
        while bytes != b'':
            bits = bin(ord(bytes))[2:].zfill(8)
            bitsArrayMessage.extend([int(bit) for bit in bits])
            bytes = message_file.read(1)
        with open(key_path, 'rb') as key_file:
            bitsArrayKey = []
            bytesk = key_file.read(1)
            while bytesk != b'':
                bits = bin(ord(bytesk))[2:].zfill(8)
                bitsArrayKey.extend([int(bit) for bit in bits])
                bytesk = key_file.read(1)
        state = help_enc(bitsArrayMessage, bitsArrayKey[:16])
        to_write_bit = help_enc(state, bitsArrayKey[:16])
        bitschunck = [to_write_bit[v:v + 8] for v in range(0, len(to_write_bit), 8)]
        with open(output_path, "wb") as file:
            for change in bitschunck:
                print(change)
                bits = bytes(change)
                # bit_string = ''.join(str(bit) for bit in bits)
                # print(bit_string)
                # towrite = int(bit_string, 10).to_bytes((len(bit_string) + 7) // 8, byteorder='big')
                file.write(towrite)






def help_dec(cipher, key):
    return 0


def decrypt(cipher_path, key_path, output_path):
    #  plaintext = cipher.decrypt(ciphertext).decode()
    return 0  # plaintext


def palainAttack(m1p, c1p, m2p, c2p):
    # read as bits
    # with open('filename', 'rb') as file:
    #     data = file.read()
    #     bits = ''.join(format(byte, '08b') for byte in data)
    return 0


encrypt("message_short.txt", "keys_short.txt", "output_path.txt")
